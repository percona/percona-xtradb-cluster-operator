apiVersion: pxc.percona.com/v1
kind: PerconaXtraDBCluster
metadata:
  name: haproxy
  finalizers:
    - delete-pxc-pods-in-order
spec:
  secretsName: my-cluster-secrets
  vaultSecretName: haproxy-vault
  pause: false
  pxc:
    size: 3
    image: -pxc
    resources:
      requests:
        memory: 0.1G
        cpu: 100m
      limits:
        memory: "1G"
        cpu: "1"
    volumeSpec:
      persistentVolumeClaim:
        resources:
          requests:
            storage: 2Gi
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
    podDisruptionBudget:
      maxUnavailable: 1
    runtimeClassName: docker-rc
  haproxy:
    enabled: false
    size: 3
    image: -haproxy
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
    tolerations:
    - key: "node.alpha.kubernetes.io/unreachable"
      operator: "Exists"
      effect: "NoExecute"
      tolerationSeconds: 6000
    podDisruptionBudget:
      maxUnavailable: 1
    runtimeClassName: docker-rc
  proxysql:
    enabled: true
    size: 1
    image: -proxysql
    resources:
      requests:
        memory: 0.1G
        cpu: 100m
      limits:
        memory: 1G
        cpu: 700m
    configuration: |
      datadir="/var/lib/proxysql"

      admin_variables =
      {
        admin_credentials="proxyadmin:admin_password"
        mysql_ifaces="0.0.0.0:6032"
        refresh_interval=2000

        cluster_username="proxyadmin"
        cluster_password="admin_password"
        cluster_check_interval_ms=200
        cluster_check_status_frequency=100
        cluster_mysql_query_rules_save_to_disk=true
        cluster_mysql_servers_save_to_disk=true
        cluster_mysql_users_save_to_disk=true
        cluster_proxysql_servers_save_to_disk=true
        cluster_mysql_query_rules_diffs_before_sync=1
        cluster_mysql_servers_diffs_before_sync=1
        cluster_mysql_users_diffs_before_sync=1
        cluster_proxysql_servers_diffs_before_sync=1
      }

      mysql_variables=
      {
        monitor_password="monitor"
        monitor_galera_healthcheck_interval=1000
        threads=2
        max_connections=2048
        default_query_delay=0
        default_query_timeout=10000
        poll_timeout=2000
        interfaces="0.0.0.0:3306"
        default_schema="information_schema"
        stacksize=1048576
        connect_timeout_server=10000
        monitor_history=60000
        monitor_connect_interval=20000
        monitor_ping_interval=10000
        ping_timeout_server=300
        commands_stats=true
        sessions_sort=true
        have_ssl=true
        ssl_p2s_ca="/etc/proxysql/ssl-internal/ca.crt"
        ssl_p2s_cert="/etc/proxysql/ssl-internal/tls.crt"
        ssl_p2s_key="/etc/proxysql/ssl-internal/tls.key"
        ssl_p2s_cipher="ECDHE-RSA-AES128-GCM-SHA256"
      }
    volumeSpec:
      persistentVolumeClaim:
        resources:
          requests:
            storage: 2Gi
    affinity:
      antiAffinityTopologyKey: "kubernetes.io/hostname"
    podDisruptionBudget:
      maxUnavailable: 1
    sidecars:
    - image: busybox
      command: ["/bin/sh"]
      args: ["-c", "while true; do trap 'exit 0' SIGINT SIGTERM SIGQUIT SIGKILL; done;"]
      name: my-sidecar-1
    - image: busybox
      command: ["/bin/sh"]
      args: ["-c", "while true; do trap 'exit 0' SIGINT SIGTERM SIGQUIT SIGKILL; done;"]
      name: my-sidecar-2
    runtimeClassName: docker-rc
  pmm:
    enabled: false
    image: perconalab/pmm-client:1.17.1
    serverHost: monitoring-service
    serverUser: pmm
    runtimeClassName: docker-rc
  backup:
    image: -backup
    serviceAccountName: default
    storages:
      pvc:
        type: filesystem
        volume:
          persistentVolumeClaim:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 1Gi
        runtimeClassName: docker-rc
      aws-s3:
        type: s3
        s3:
          region: us-east-1
          bucket: operator-testing
          credentialsSecret: aws-s3-secret
      minio:
        type: s3
        s3:
          credentialsSecret: minio-secret
          region: us-east-1
          bucket: operator-testing
          endpointUrl: http://minio-service:9000/
      gcp-cs:
        type: s3
        s3:
          credentialsSecret: gcp-cs-secret
          region: us-east-1
          bucket: operator-testing
          endpointUrl: https://storage.googleapis.com
