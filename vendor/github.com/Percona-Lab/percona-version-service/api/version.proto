syntax = "proto3";

package version;

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0"
  }
  external_docs: {
    url: "https://github.com/Percona-Lab/percona-version-service"
    description: "This service provides version information and image paths for supporting the use of Percona Kubernetes Operators in a variety of scenarios while enabling specific version deployments and automated upgrades."
  }
  schemes: [
    HTTP,
    HTTPS
  ]
};
// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/Percona-Lab/percona-version-service/version";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// VersionService provides public API methods for version service usage.
service VersionService {
  // Apply provides information about specific product version and its dependencies.
  rpc Apply(ApplyRequest) returns (VersionResponse) {
    option (google.api.http) = {
      get: "/versions/v1/{product}/{operator_version}/{apply}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Specific version"
      description: "Return specific product version"
    };
  }
  // Operator provides information about product versions and its dependencies for operator.
  rpc Operator(OperatorRequest) returns (OperatorResponse) {
    option (google.api.http) = {
      get: "/versions/v1/{product}/{operator_version}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Product versions for specific operator version"
      description: "Return product versions for specific operator"
    };
  }
  // Product provides information about product versions among all operator versions.
  rpc Product(ProductRequest) returns (ProductResponse) {
    option (google.api.http) = {
      get: "/versions/v1/{product}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Product versions for all operator version"
      description: "Return product versions for all operator"
    };
  }
}

message ApplyRequest {
  string product = 1;
  string operator_version = 2;
  string apply = 3;
  string database_version = 4;
  string kube_version = 5;
  string platform = 6;
  string pmm_version = 7;
  string backup_version = 8;
  string proxysql_version = 9;
  string haproxy_version = 10;
  string namespace_uid = 11;
  string custom_resource_uid = 12;
  string log_collector_version = 13;
}

message OperatorRequest {
  string product = 1;
  string operator_version = 2;
  string database_version = 4;
  string kube_version = 5;
  string platform = 6;
  string pmm_version = 7;
  string backup_version = 8;
  string proxysql_version = 9;
  string haproxy_version = 10;
  string namespace_uid = 11;
  string custom_resource_uid = 12;
  string log_collector_version = 13;
}

message ProductRequest {
  string product = 1;
  string database_version = 4;
  string kube_version = 5;
  string platform = 6;
  string pmm_version = 7;
  string backup_version = 8;
  string proxysql_version = 9;
  string haproxy_version = 10;
  string namespace_uid = 11;
  string custom_resource_uid = 12;
  string log_collector_version = 13;
}

// Status describes the current version status.
enum Status {
  status_invalid = 0;
  recommended = 1;
  available = 2;
  required = 3;
  disabled = 4;
}

// Version represents product version information.
message Version {
  string image_path = 1;
  string image_hash = 2;
  Status status = 3;
  bool critical = 4;
}

// VersionMatrix represents set of possible product versions.
message VersionMatrix {
  map<string, Version> mongod = 1;
  map<string, Version> pxc = 2;
  map<string, Version> pmm = 3;
  map<string, Version> proxysql = 4;
  map<string, Version> haproxy = 5;
  map<string, Version> backup = 6;
  map<string, Version> operator = 7;
  map<string, Version> log_collector = 8;
}

// OperatorVersion represents operator version.
message OperatorVersion {
  string product = 1;
  string operator = 2;
  VersionMatrix matrix = 3;
}

message VersionResponse {
  repeated OperatorVersion versions = 1;
}

message OperatorResponse {
  repeated OperatorVersion versions = 1;
}

message ProductResponse {
  repeated OperatorVersion versions = 1;
}
