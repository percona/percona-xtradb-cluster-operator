swagger: "2.0"
info:
  title: api/version.proto
  version: "1.0"
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /versions/v1/{product}:
    get:
      summary: Product versions for all operator version
      description: Return product versions for all operator
      operationId: VersionService_Product
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/versionProductResponse'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: product
          in: path
          required: true
          type: string
        - name: databaseVersion
          in: query
          required: false
          type: string
        - name: kubeVersion
          in: query
          required: false
          type: string
        - name: platform
          in: query
          required: false
          type: string
        - name: pmmVersion
          in: query
          required: false
          type: string
        - name: backupVersion
          in: query
          required: false
          type: string
        - name: proxysqlVersion
          in: query
          required: false
          type: string
        - name: haproxyVersion
          in: query
          required: false
          type: string
        - name: namespaceUid
          in: query
          required: false
          type: string
        - name: customResourceUid
          in: query
          required: false
          type: string
        - name: logCollectorVersion
          in: query
          required: false
          type: string
      tags:
        - VersionService
  /versions/v1/{product}/{operatorVersion}:
    get:
      summary: Product versions for specific operator version
      description: Return product versions for specific operator
      operationId: VersionService_Operator
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/versionOperatorResponse'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: product
          in: path
          required: true
          type: string
        - name: operatorVersion
          in: path
          required: true
          type: string
        - name: databaseVersion
          in: query
          required: false
          type: string
        - name: kubeVersion
          in: query
          required: false
          type: string
        - name: platform
          in: query
          required: false
          type: string
        - name: pmmVersion
          in: query
          required: false
          type: string
        - name: backupVersion
          in: query
          required: false
          type: string
        - name: proxysqlVersion
          in: query
          required: false
          type: string
        - name: haproxyVersion
          in: query
          required: false
          type: string
        - name: namespaceUid
          in: query
          required: false
          type: string
        - name: customResourceUid
          in: query
          required: false
          type: string
        - name: logCollectorVersion
          in: query
          required: false
          type: string
      tags:
        - VersionService
  /versions/v1/{product}/{operatorVersion}/{apply}:
    get:
      summary: Specific version
      description: Return specific product version
      operationId: VersionService_Apply
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/versionVersionResponse'
        default:
          description: An unexpected error response
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: product
          in: path
          required: true
          type: string
        - name: operatorVersion
          in: path
          required: true
          type: string
        - name: apply
          in: path
          required: true
          type: string
        - name: databaseVersion
          in: query
          required: false
          type: string
        - name: kubeVersion
          in: query
          required: false
          type: string
        - name: platform
          in: query
          required: false
          type: string
        - name: pmmVersion
          in: query
          required: false
          type: string
        - name: backupVersion
          in: query
          required: false
          type: string
        - name: proxysqlVersion
          in: query
          required: false
          type: string
        - name: haproxyVersion
          in: query
          required: false
          type: string
        - name: namespaceUid
          in: query
          required: false
          type: string
        - name: customResourceUid
          in: query
          required: false
          type: string
        - name: logCollectorVersion
          in: query
          required: false
          type: string
      tags:
        - VersionService
definitions:
  googlerpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
  protobufAny:
    type: object
    properties:
      typeUrl:
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: Must be a valid serialized protocol buffer of the above specified type.
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  versionOperatorResponse:
    type: object
    properties:
      versions:
        type: array
        items:
          $ref: '#/definitions/versionOperatorVersion'
  versionOperatorVersion:
    type: object
    properties:
      product:
        type: string
      operator:
        type: string
      matrix:
        $ref: '#/definitions/versionVersionMatrix'
    description: OperatorVersion represents operator version.
  versionProductResponse:
    type: object
    properties:
      versions:
        type: array
        items:
          $ref: '#/definitions/versionOperatorVersion'
  versionStatus:
    type: string
    enum:
      - status_invalid
      - recommended
      - available
      - required
      - disabled
    default: status_invalid
    description: Status describes the current version status.
  versionVersion:
    type: object
    properties:
      imagePath:
        type: string
      imageHash:
        type: string
      status:
        $ref: '#/definitions/versionStatus'
      critical:
        type: boolean
        format: boolean
    description: Version represents product version information.
  versionVersionMatrix:
    type: object
    properties:
      mongod:
        type: object
        additionalProperties:
          $ref: '#/definitions/versionVersion'
      pxc:
        type: object
        additionalProperties:
          $ref: '#/definitions/versionVersion'
      pmm:
        type: object
        additionalProperties:
          $ref: '#/definitions/versionVersion'
      proxysql:
        type: object
        additionalProperties:
          $ref: '#/definitions/versionVersion'
      haproxy:
        type: object
        additionalProperties:
          $ref: '#/definitions/versionVersion'
      backup:
        type: object
        additionalProperties:
          $ref: '#/definitions/versionVersion'
      operator:
        type: object
        additionalProperties:
          $ref: '#/definitions/versionVersion'
      logCollector:
        type: object
        additionalProperties:
          $ref: '#/definitions/versionVersion'
    description: VersionMatrix represents set of possible product versions.
  versionVersionResponse:
    type: object
    properties:
      versions:
        type: array
        items:
          $ref: '#/definitions/versionOperatorVersion'
externalDocs:
  description: This service provides version information and image paths for supporting the use of Percona Kubernetes Operators in a variety of scenarios while enabling specific version deployments and automated upgrades.
  url: https://github.com/Percona-Lab/percona-version-service
