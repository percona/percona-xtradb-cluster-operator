// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionVersionV2 Version represents product version information.
//
// swagger:model versionVersionV2
type VersionVersionV2 struct {

	// critical
	Critical bool `json:"critical,omitempty"`

	// image hash
	ImageHash string `json:"imageHash,omitempty"`

	// image hash arm64
	ImageHashArm64 string `json:"imageHashArm64,omitempty"`

	// image path
	ImagePath string `json:"imagePath,omitempty"`

	// release_timestamp is the release time of this image.
	// Format: date-time
	ImageReleaseTimestamp strfmt.DateTime `json:"imageReleaseTimestamp,omitempty"`

	// status
	Status *VersionStatus `json:"status,omitempty"`
}

// Validate validates this version version v2
func (m *VersionVersionV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageReleaseTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionVersionV2) validateImageReleaseTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageReleaseTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("imageReleaseTimestamp", "body", "date-time", m.ImageReleaseTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VersionVersionV2) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this version version v2 based on the context it is used
func (m *VersionVersionV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionVersionV2) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionVersionV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionVersionV2) UnmarshalBinary(b []byte) error {
	var res VersionVersionV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
