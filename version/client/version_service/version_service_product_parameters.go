// Code generated by go-swagger; DO NOT EDIT.

package version_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewVersionServiceProductParams creates a new VersionServiceProductParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewVersionServiceProductParams() *VersionServiceProductParams {
	return &VersionServiceProductParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewVersionServiceProductParamsWithTimeout creates a new VersionServiceProductParams object
// with the ability to set a timeout on a request.
func NewVersionServiceProductParamsWithTimeout(timeout time.Duration) *VersionServiceProductParams {
	return &VersionServiceProductParams{
		timeout: timeout,
	}
}

// NewVersionServiceProductParamsWithContext creates a new VersionServiceProductParams object
// with the ability to set a context for a request.
func NewVersionServiceProductParamsWithContext(ctx context.Context) *VersionServiceProductParams {
	return &VersionServiceProductParams{
		Context: ctx,
	}
}

// NewVersionServiceProductParamsWithHTTPClient creates a new VersionServiceProductParams object
// with the ability to set a custom HTTPClient for a request.
func NewVersionServiceProductParamsWithHTTPClient(client *http.Client) *VersionServiceProductParams {
	return &VersionServiceProductParams{
		HTTPClient: client,
	}
}

/*
VersionServiceProductParams contains all the parameters to send to the API endpoint

	for the version service product operation.

	Typically these are written to a http.Request.
*/
type VersionServiceProductParams struct {

	// BackupVersion.
	BackupVersion *string

	// ClusterWideEnabled.
	//
	// Format: boolean
	ClusterWideEnabled *bool

	// CustomResourceUID.
	CustomResourceUID *string

	// DatabaseVersion.
	DatabaseVersion *string

	// HaproxyVersion.
	HaproxyVersion *string

	// HashicorpVaultEnabled.
	//
	// Format: boolean
	HashicorpVaultEnabled *bool

	// KubeVersion.
	KubeVersion *string

	// LogCollectorVersion.
	LogCollectorVersion *string

	// NamespaceUID.
	NamespaceUID *string

	// Platform.
	Platform *string

	// PmmVersion.
	PmmVersion *string

	// Product.
	Product string

	// ProxysqlVersion.
	ProxysqlVersion *string

	// ShardingEnabled.
	//
	// Format: boolean
	ShardingEnabled *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the version service product params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VersionServiceProductParams) WithDefaults() *VersionServiceProductParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the version service product params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *VersionServiceProductParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the version service product params
func (o *VersionServiceProductParams) WithTimeout(timeout time.Duration) *VersionServiceProductParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the version service product params
func (o *VersionServiceProductParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the version service product params
func (o *VersionServiceProductParams) WithContext(ctx context.Context) *VersionServiceProductParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the version service product params
func (o *VersionServiceProductParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the version service product params
func (o *VersionServiceProductParams) WithHTTPClient(client *http.Client) *VersionServiceProductParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the version service product params
func (o *VersionServiceProductParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackupVersion adds the backupVersion to the version service product params
func (o *VersionServiceProductParams) WithBackupVersion(backupVersion *string) *VersionServiceProductParams {
	o.SetBackupVersion(backupVersion)
	return o
}

// SetBackupVersion adds the backupVersion to the version service product params
func (o *VersionServiceProductParams) SetBackupVersion(backupVersion *string) {
	o.BackupVersion = backupVersion
}

// WithClusterWideEnabled adds the clusterWideEnabled to the version service product params
func (o *VersionServiceProductParams) WithClusterWideEnabled(clusterWideEnabled *bool) *VersionServiceProductParams {
	o.SetClusterWideEnabled(clusterWideEnabled)
	return o
}

// SetClusterWideEnabled adds the clusterWideEnabled to the version service product params
func (o *VersionServiceProductParams) SetClusterWideEnabled(clusterWideEnabled *bool) {
	o.ClusterWideEnabled = clusterWideEnabled
}

// WithCustomResourceUID adds the customResourceUID to the version service product params
func (o *VersionServiceProductParams) WithCustomResourceUID(customResourceUID *string) *VersionServiceProductParams {
	o.SetCustomResourceUID(customResourceUID)
	return o
}

// SetCustomResourceUID adds the customResourceUid to the version service product params
func (o *VersionServiceProductParams) SetCustomResourceUID(customResourceUID *string) {
	o.CustomResourceUID = customResourceUID
}

// WithDatabaseVersion adds the databaseVersion to the version service product params
func (o *VersionServiceProductParams) WithDatabaseVersion(databaseVersion *string) *VersionServiceProductParams {
	o.SetDatabaseVersion(databaseVersion)
	return o
}

// SetDatabaseVersion adds the databaseVersion to the version service product params
func (o *VersionServiceProductParams) SetDatabaseVersion(databaseVersion *string) {
	o.DatabaseVersion = databaseVersion
}

// WithHaproxyVersion adds the haproxyVersion to the version service product params
func (o *VersionServiceProductParams) WithHaproxyVersion(haproxyVersion *string) *VersionServiceProductParams {
	o.SetHaproxyVersion(haproxyVersion)
	return o
}

// SetHaproxyVersion adds the haproxyVersion to the version service product params
func (o *VersionServiceProductParams) SetHaproxyVersion(haproxyVersion *string) {
	o.HaproxyVersion = haproxyVersion
}

// WithHashicorpVaultEnabled adds the hashicorpVaultEnabled to the version service product params
func (o *VersionServiceProductParams) WithHashicorpVaultEnabled(hashicorpVaultEnabled *bool) *VersionServiceProductParams {
	o.SetHashicorpVaultEnabled(hashicorpVaultEnabled)
	return o
}

// SetHashicorpVaultEnabled adds the hashicorpVaultEnabled to the version service product params
func (o *VersionServiceProductParams) SetHashicorpVaultEnabled(hashicorpVaultEnabled *bool) {
	o.HashicorpVaultEnabled = hashicorpVaultEnabled
}

// WithKubeVersion adds the kubeVersion to the version service product params
func (o *VersionServiceProductParams) WithKubeVersion(kubeVersion *string) *VersionServiceProductParams {
	o.SetKubeVersion(kubeVersion)
	return o
}

// SetKubeVersion adds the kubeVersion to the version service product params
func (o *VersionServiceProductParams) SetKubeVersion(kubeVersion *string) {
	o.KubeVersion = kubeVersion
}

// WithLogCollectorVersion adds the logCollectorVersion to the version service product params
func (o *VersionServiceProductParams) WithLogCollectorVersion(logCollectorVersion *string) *VersionServiceProductParams {
	o.SetLogCollectorVersion(logCollectorVersion)
	return o
}

// SetLogCollectorVersion adds the logCollectorVersion to the version service product params
func (o *VersionServiceProductParams) SetLogCollectorVersion(logCollectorVersion *string) {
	o.LogCollectorVersion = logCollectorVersion
}

// WithNamespaceUID adds the namespaceUID to the version service product params
func (o *VersionServiceProductParams) WithNamespaceUID(namespaceUID *string) *VersionServiceProductParams {
	o.SetNamespaceUID(namespaceUID)
	return o
}

// SetNamespaceUID adds the namespaceUid to the version service product params
func (o *VersionServiceProductParams) SetNamespaceUID(namespaceUID *string) {
	o.NamespaceUID = namespaceUID
}

// WithPlatform adds the platform to the version service product params
func (o *VersionServiceProductParams) WithPlatform(platform *string) *VersionServiceProductParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the version service product params
func (o *VersionServiceProductParams) SetPlatform(platform *string) {
	o.Platform = platform
}

// WithPmmVersion adds the pmmVersion to the version service product params
func (o *VersionServiceProductParams) WithPmmVersion(pmmVersion *string) *VersionServiceProductParams {
	o.SetPmmVersion(pmmVersion)
	return o
}

// SetPmmVersion adds the pmmVersion to the version service product params
func (o *VersionServiceProductParams) SetPmmVersion(pmmVersion *string) {
	o.PmmVersion = pmmVersion
}

// WithProduct adds the product to the version service product params
func (o *VersionServiceProductParams) WithProduct(product string) *VersionServiceProductParams {
	o.SetProduct(product)
	return o
}

// SetProduct adds the product to the version service product params
func (o *VersionServiceProductParams) SetProduct(product string) {
	o.Product = product
}

// WithProxysqlVersion adds the proxysqlVersion to the version service product params
func (o *VersionServiceProductParams) WithProxysqlVersion(proxysqlVersion *string) *VersionServiceProductParams {
	o.SetProxysqlVersion(proxysqlVersion)
	return o
}

// SetProxysqlVersion adds the proxysqlVersion to the version service product params
func (o *VersionServiceProductParams) SetProxysqlVersion(proxysqlVersion *string) {
	o.ProxysqlVersion = proxysqlVersion
}

// WithShardingEnabled adds the shardingEnabled to the version service product params
func (o *VersionServiceProductParams) WithShardingEnabled(shardingEnabled *bool) *VersionServiceProductParams {
	o.SetShardingEnabled(shardingEnabled)
	return o
}

// SetShardingEnabled adds the shardingEnabled to the version service product params
func (o *VersionServiceProductParams) SetShardingEnabled(shardingEnabled *bool) {
	o.ShardingEnabled = shardingEnabled
}

// WriteToRequest writes these params to a swagger request
func (o *VersionServiceProductParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BackupVersion != nil {

		// query param backupVersion
		var qrBackupVersion string

		if o.BackupVersion != nil {
			qrBackupVersion = *o.BackupVersion
		}
		qBackupVersion := qrBackupVersion
		if qBackupVersion != "" {

			if err := r.SetQueryParam("backupVersion", qBackupVersion); err != nil {
				return err
			}
		}
	}

	if o.ClusterWideEnabled != nil {

		// query param clusterWideEnabled
		var qrClusterWideEnabled bool

		if o.ClusterWideEnabled != nil {
			qrClusterWideEnabled = *o.ClusterWideEnabled
		}
		qClusterWideEnabled := swag.FormatBool(qrClusterWideEnabled)
		if qClusterWideEnabled != "" {

			if err := r.SetQueryParam("clusterWideEnabled", qClusterWideEnabled); err != nil {
				return err
			}
		}
	}

	if o.CustomResourceUID != nil {

		// query param customResourceUid
		var qrCustomResourceUID string

		if o.CustomResourceUID != nil {
			qrCustomResourceUID = *o.CustomResourceUID
		}
		qCustomResourceUID := qrCustomResourceUID
		if qCustomResourceUID != "" {

			if err := r.SetQueryParam("customResourceUid", qCustomResourceUID); err != nil {
				return err
			}
		}
	}

	if o.DatabaseVersion != nil {

		// query param databaseVersion
		var qrDatabaseVersion string

		if o.DatabaseVersion != nil {
			qrDatabaseVersion = *o.DatabaseVersion
		}
		qDatabaseVersion := qrDatabaseVersion
		if qDatabaseVersion != "" {

			if err := r.SetQueryParam("databaseVersion", qDatabaseVersion); err != nil {
				return err
			}
		}
	}

	if o.HaproxyVersion != nil {

		// query param haproxyVersion
		var qrHaproxyVersion string

		if o.HaproxyVersion != nil {
			qrHaproxyVersion = *o.HaproxyVersion
		}
		qHaproxyVersion := qrHaproxyVersion
		if qHaproxyVersion != "" {

			if err := r.SetQueryParam("haproxyVersion", qHaproxyVersion); err != nil {
				return err
			}
		}
	}

	if o.HashicorpVaultEnabled != nil {

		// query param hashicorpVaultEnabled
		var qrHashicorpVaultEnabled bool

		if o.HashicorpVaultEnabled != nil {
			qrHashicorpVaultEnabled = *o.HashicorpVaultEnabled
		}
		qHashicorpVaultEnabled := swag.FormatBool(qrHashicorpVaultEnabled)
		if qHashicorpVaultEnabled != "" {

			if err := r.SetQueryParam("hashicorpVaultEnabled", qHashicorpVaultEnabled); err != nil {
				return err
			}
		}
	}

	if o.KubeVersion != nil {

		// query param kubeVersion
		var qrKubeVersion string

		if o.KubeVersion != nil {
			qrKubeVersion = *o.KubeVersion
		}
		qKubeVersion := qrKubeVersion
		if qKubeVersion != "" {

			if err := r.SetQueryParam("kubeVersion", qKubeVersion); err != nil {
				return err
			}
		}
	}

	if o.LogCollectorVersion != nil {

		// query param logCollectorVersion
		var qrLogCollectorVersion string

		if o.LogCollectorVersion != nil {
			qrLogCollectorVersion = *o.LogCollectorVersion
		}
		qLogCollectorVersion := qrLogCollectorVersion
		if qLogCollectorVersion != "" {

			if err := r.SetQueryParam("logCollectorVersion", qLogCollectorVersion); err != nil {
				return err
			}
		}
	}

	if o.NamespaceUID != nil {

		// query param namespaceUid
		var qrNamespaceUID string

		if o.NamespaceUID != nil {
			qrNamespaceUID = *o.NamespaceUID
		}
		qNamespaceUID := qrNamespaceUID
		if qNamespaceUID != "" {

			if err := r.SetQueryParam("namespaceUid", qNamespaceUID); err != nil {
				return err
			}
		}
	}

	if o.Platform != nil {

		// query param platform
		var qrPlatform string

		if o.Platform != nil {
			qrPlatform = *o.Platform
		}
		qPlatform := qrPlatform
		if qPlatform != "" {

			if err := r.SetQueryParam("platform", qPlatform); err != nil {
				return err
			}
		}
	}

	if o.PmmVersion != nil {

		// query param pmmVersion
		var qrPmmVersion string

		if o.PmmVersion != nil {
			qrPmmVersion = *o.PmmVersion
		}
		qPmmVersion := qrPmmVersion
		if qPmmVersion != "" {

			if err := r.SetQueryParam("pmmVersion", qPmmVersion); err != nil {
				return err
			}
		}
	}

	// path param product
	if err := r.SetPathParam("product", o.Product); err != nil {
		return err
	}

	if o.ProxysqlVersion != nil {

		// query param proxysqlVersion
		var qrProxysqlVersion string

		if o.ProxysqlVersion != nil {
			qrProxysqlVersion = *o.ProxysqlVersion
		}
		qProxysqlVersion := qrProxysqlVersion
		if qProxysqlVersion != "" {

			if err := r.SetQueryParam("proxysqlVersion", qProxysqlVersion); err != nil {
				return err
			}
		}
	}

	if o.ShardingEnabled != nil {

		// query param shardingEnabled
		var qrShardingEnabled bool

		if o.ShardingEnabled != nil {
			qrShardingEnabled = *o.ShardingEnabled
		}
		qShardingEnabled := swag.FormatBool(qrShardingEnabled)
		if qShardingEnabled != "" {

			if err := r.SetQueryParam("shardingEnabled", qShardingEnabled); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
